// <auto-generated />
using System;
using CmCommunityBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CM.CommunityBackend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221216085908_addedmodels")]
    partial class addedmodels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CM.Community_Back_end.Models.Comment", b =>
                {
                    b.Property<int>("commentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("commentID"));

                    b.Property<string>("commentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("commentID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CM.Community_Back_end.Models.CommentPost", b =>
                {
                    b.Property<int>("commentID")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("postID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("commentID", "postID");

                    b.HasIndex("postID");

                    b.ToTable("CommentPosts");
                });

            modelBuilder.Entity("CM.Community_Back_end.Models.Group", b =>
                {
                    b.Property<int>("groupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("groupID"));

                    b.Property<string>("groupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("groupID");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("CM.Community_Back_end.Models.Post", b =>
                {
                    b.Property<int>("postID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("postID"));

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("postText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("postTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("publicationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("postID");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("CM.Community_Back_end.Models.Tag", b =>
                {
                    b.Property<int>("tagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("tagID"));

                    b.Property<string>("tagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("tagID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CM.Community_Back_end.Models.TagPost", b =>
                {
                    b.Property<int>("tagID")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("postID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("tagID", "postID");

                    b.HasIndex("postID");

                    b.ToTable("TagPosts");
                });

            modelBuilder.Entity("CM.Community_Back_end.Models.User", b =>
                {
                    b.Property<int>("userID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userID"));

                    b.Property<string>("userEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CM.Community_Back_end.Models.UserGroup", b =>
                {
                    b.Property<int>("userID")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("groupID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("userID", "groupID");

                    b.HasIndex("groupID");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("CM.Community_Back_end.Models.UserPost", b =>
                {
                    b.Property<int>("userID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("postID")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("userID", "postID");

                    b.HasIndex("postID");

                    b.ToTable("UserPosts");
                });

            modelBuilder.Entity("CM.Community_Back_end.Models.CommentPost", b =>
                {
                    b.HasOne("CM.Community_Back_end.Models.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("commentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CM.Community_Back_end.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("postID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("CM.Community_Back_end.Models.TagPost", b =>
                {
                    b.HasOne("CM.Community_Back_end.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("postID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CM.Community_Back_end.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("tagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CM.Community_Back_end.Models.UserGroup", b =>
                {
                    b.HasOne("CM.Community_Back_end.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("groupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CM.Community_Back_end.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CM.Community_Back_end.Models.UserPost", b =>
                {
                    b.HasOne("CM.Community_Back_end.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("postID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CM.Community_Back_end.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
